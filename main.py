from config import *
import telebot
from telebot import types
from parser import HHParser
from bs4 import BeautifulSoup
import requests
import time

bot = telebot.TeleBot(TOKEN)
parser = HHParser(URL)
regions = {
    '–†–æ—Å—Å–∏—è': 0,
    '–ú–æ—Å–∫–≤–∞': 1,
    '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥': 2,
    '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥': 3,
    '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫': 4
}

@bot.message_handler(commands=['start'])
def start(message: types.Message):
    bot.send_sticker(message.from_user.id, STICKER)
    bot.send_message(message.from_user.id, "–í—ã —Å–ø—Ä–æ—Å–∏—Ç–µ —á—Ç–æ —É–º–µ–µ—Ç —ç—Ç–æ—Ç –±–æ—Ç, "
                                           "—è –æ—Ç–≤–µ—á—É, –æ–Ω –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∞–π–¥–µ—Ç –≤–∞–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏."
                                           "–ú–æ–∂–µ—Ç –≤—ã –µ—â–µ —Å–ø—Ä–æ—Å–∏—Ç–µ, —á–µ–º –æ–Ω –ª—É—á—à–µ hh.ru –∏–ª–∏ –ø–æ–¥–æ–±–Ω—ã—Ö —Å–∞–π—Ç–æ–≤, —è –æ—Ç–≤–µ—á—É, –Ω–∏—á–µ–ºü§∑ \n\n"
                                           "–ß—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –≤–∞–∫–∞–Ω—Å–∏—é –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É *'–ü–æ–∏—Å–∫'*, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Ä–µ–≥–∏–æ–Ω, –Ω–∞–∂–º–∏—Ç–µ *'–ù–∞—Å—Ç—Ä–æ–π–∫–∏'*\n"
                                           "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –≤—Å–µ —Å–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É *'/start'*, –µ—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å *'/help'*\n\n*P.S*\n"
                                           "–ï—Å–ª–∏ –Ω–∞—à–ª–∏ –æ—à–∏–±–∫—É, —Å–æ–æ–±—â–∏—Ç–µ –º–Ω–µ –≤ –ª–∏—á–∫—É, –±—É–¥—É –æ—á–µ–Ω—å –±–ª–∞–≥–æ–¥–∞—Ä–µ–Ω\n\n"
                                           "–†–∞–∑—Ä–∞–±–æ—Ç–∞–ª *–®–∞–≥–∏–¥–∂–∞–Ω—è–Ω –ê–Ω–¥—Ä–µ*",
                     reply_markup=main_keyboard(), parse_mode='Markdown')



@bot.message_handler(content_types=['text'])
def buttons_handler(message: types.Message):
    if message.text ==  '–ü–æ–∏—Å–∫':
        bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏",reply_markup=main_keyboard())
    elif message.text == '–ù–∞—Å—Ç—Ä–æ–π–∫–∏':
        bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω', reply_markup=area_keyboard())
    elif message.text in regions.keys():
        parser.set_url(area=regions[message.text])
        bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏",reply_markup=main_keyboard())

    else:
        request_handler(message)


def request_handler(message: types.Message):
    if message.text == '–î–∞–ª–µ–µ':
        parser.set_url(page=1)
    elif message.text == '–ù–∞–∑–∞–¥':
        parser.set_url(page=-1)
    else:
        parser.set_url(page=False, text=message.text)
        bot.send_message(message.from_user.id, f'*{parser.get_title()}* –≤—Å–µ–≥–æ –≤–∞–∫–∞–Ω—Å–∏–π –Ω–∞–π–¥–µ–Ω–æ –≤ —Ä–µ–≥–∏–æ–Ω–µ *{parser.get_area()}*',
                         parse_mode="Markdown",
                         reply_markup=next_keyboard())
    result = parser.parse()

    for title, description in result:
        time.sleep(0)
        try:
            bot.send_message(message.from_user.id, f'*{title[0]}*\n–ó–∞—Ä–ø–ª–∞—Ç–∞: *{title[1]}*\n–ö–æ–º–ø–∞–Ω–∏—è: *{title[2].strip()}*\n_{description[3]}_\n\n'
                                                   f'{description[0]}\n{description[1]}',
                             reply_markup=inline_keyboard(description[2]), parse_mode="Markdown")
        except:
            continue

    bot.send_message(message.from_user.id, "–ù–∞–∂–º–∏—Ç–µ *'–¥–∞–ª–µ–µ'*, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ –¥—Ä—É–≥—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É",parse_mode='Markdown')

def area_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
    button1 = types.KeyboardButton("–†–æ—Å—Å–∏—è")
    button2 = types.KeyboardButton("–ú–æ—Å–∫–≤–∞")
    button3 = types.KeyboardButton("–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥")
    button4 = types.KeyboardButton("–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥")
    button5 = types.KeyboardButton("–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫")
    keyboard.add(button1, button2, button3, button4, button5)
    return keyboard

def main_keyboard():
    main_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    search_button = types.KeyboardButton("–ü–æ–∏—Å–∫")
    settings_button = types.KeyboardButton("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    main_keyboard.add(search_button, settings_button)
    return main_keyboard

def inline_keyboard(url):
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    button = types.InlineKeyboardButton('–ü–µ—Ä–µ–π—Ç–∏', url=url)
    keyboard.add(button)
    return keyboard

def next_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    button1 = types.KeyboardButton("–î–∞–ª–µ–µ")
    button2 = types.KeyboardButton("–ù–∞–∑–∞–¥")
    keyboard.add(button1, button2)
    return keyboard

if __name__ == '__main__':
     bot.polling(none_stop=True)

